/// ------ PARTE 1 -------- ///

// Separando os arquivos

Crio a pasta GoBarber
>>> yarn init -y
>>> yarn add express

Criar uma pasta src
Dentro dela crio os arquivos:
        app.js      // Configuração do server.express
        server.js   // Servidor
        routes.js   // Rotas

// ----- app.js ------ //
Começo importando express
Importo routes

Defino a primeira class, no caso a app
    Método constructor // executado automaticamente
        dentro dele eu crio uma variável com o express
        chamo os métodos middlewares e routes

Defino os 2 métodos, middlewares e routes
    middlewares -> vai fazer a leitura de json
    routes 		-> vai rodar o arquivo routes.js

Exporta uma nova instância de app, jogando pra server


// ------ server.js ------ //
Crio a parte de Servidor
importo o app.js
Criou um listen de app


// ----- routes ----- //
Importo o {Router} de express -> separando a parte de roteamento
Defino uma variável routes

crio uma rota normal, para teste

module.export routes

>>> node src/server.js

/// ------ PARTE 2 ----- ///
--- import/export -> O node não suporta
adiciono sucrase e nodemon como dependencia da aplicação
>>> yarn add sucrase nodemon -D

altero o const por import e require por from
module.export -> export default

>>> yarn sucrase-node src/server.js //rodar o server

// package.json - dev e debug
crio nodemon.json
nas config do debug


///  ----- PARTE 3 ----- ////
Instalação do docker
Postgres dockerhub tem as variáveis ambientes
Postbird


>>> sudo docker run --name database -e POSTGRES_PASSWORD=docker -p 5432:5432 -d postgres:11

No postbird
	localhost
	5432
	postgres
	docker

Testar a conexão, salvar
Create database


/// ---- PARTE 4 ---- ///
Padronização do código
>>> yarn add eslint -D // Vai garantir que estou seguindo meus padrões
>>> yarn eslint --init

Remover o arquivo package-lock
>>> yarn // para fazer o mapeamento no yarn.lock

Instalar o plugin eslint
configuro o settings.json


//prettier
>>> yarn add prettier eslint-config-prettier eslint-plugin-prettier -D

//no .eslintrc
configuro as rules
configuro plugins

crio um arquivo .prettierrc

>>>yarn eslint --fix src --ext .js

// instala o plugin editorconfig
Mantém um padrão caso os desenvolvedores da equipe usem outro editor
vai na raiz do projeto, botão direito -> generate editor.config
adiciona algumas configurações


/// -----  PARTE 5 ---- ///
Configurar sequelize e estruturar as pastas
Dentro de src
  crio a pasta config
    crio o arquivo database.js // Armazenará as credenciais da base de dados

  crio a pasta database

  crio a pasta app // Aqui ficará a regra de negócio, lógica da aplicação
    pasta controllers
    pasta models

>>> yarn add sequelize // Para rodar o postgres
>>> yarn add sequelize-cli -D -> facilita a criação de migrations

Crio na raiz o arquivo .sequelizerc

/// --- database.js --- ///
>> yarn add pg pg-hstore // para poder usar o dialect


/// ----- PARTE 6 ---- ///
Criando a tabela de usuários da app

>>> yarn sequelize migration:create --name=create-users //create users pq é a tabela q vai criar a tabela de usuários
Vai criar uma pasta migrations e dentro da pasta migrations vai criar um arquivo
Configura a migration, passando os dados da tabela como id, name, email // Muito importante ver se os nomes estão certos, se está escrevendo em inglês

>>> yarn sequelize db:migrate

>>> yarn sequelize db:migrate:undo //desfaz a migrate

No Postbird, atualiza -> a tabela já estará lá


//// ----- PARTE 7 ---- ////
MODEL DE USUÁRIO - MANIPULAR OS USERS

Dentro de models
  User.js

Começo importando o Sequelize, Model do sequelize
Defino uma class pai
Dentro eu com um metodo init, com sequelize como parêmetro
Crio um objeto, um outro método, super.init() // referente a class pai
Como primeiro parâmetro passo um objeto com as informações que o usuário preencherá
Como segundo parâmetro passo o sequelize
Exporto por padrão a class User

///----- PARTE 8 ----- ///
//Conexão com o banco de dados

Dentro de database
  crio o arquivo index.js

Importo Sequelize
Importo User // model
Importo databaseConfig // vai puxar as credenciais do database

Crio uma class para fazer a conexão com o banco de dados
Na constructor eu chamo o método init
No método init eu crio uma variável que fará a conexão com o banco de dados
  Essa variável está sendo esperada dentro dos models

Crio um array para os models
Percorro ele, retornando a variável connection para dentro do init

Depois disso, preciso chamar esse arquivo no app.js
  Apenas chamar

Para testar, vou em rotas e crio um json
Caso não esteja funcionando, tentar mudar o email


//// ----- PARTE 9 ----- ////
Criando o controller
Dentro de controllers
  userController

Como sempre estará usando o model de usuário, importar o User
Crio o método store, q terá basicamente a funcionalidade do server.post
Tenho a variável q recebe o req.body e o res q retorna o valor da variável

Vou em rotas, importo o userController
Gero uma rota post passando o método store de userController

Crio uma condição no userController, para ver se não existe um user com o mesmo email

//Insomnia -> por enquanto será alimentado no Insomnia
Crio a pasta USERS
  Create POST json
    passo as informações q quero receber


//// ------ PARTE 10 ------ ////
//Gerando o hash

>>> yarn add bcryptjs
No User.js
	Importo bcrypt from bcryptjs

Crio um campo password dentro do primeiro parâmetro

Crio uma variavel this.addHook -> É executada de forma automática
Passo a password_hash -> pegando o valor criptografado

No Insomnia, altero para password
e ta pronto o sorvetinho

/// ----- PARTE 11 ----- ///
//Autenticação do usuário

Crio a class sessionControler
Com o método store

>>> yarn add jsonwebtoken
Importar o jwt de dentro do jsonwebtoken

A autenticação será através do email e senha

Foi criada uma validação do email, pra checar se existe
Dentro de User.js, foi criada uma validação da senha, para comparar a senha digitada com a senha armazanada no banco de dados

Foi gerado um token, esse token pegou o id do usuário, um código aleatório gerado pelo md5 online e tmb o tempo de expiração


/// ----- PARTE 12 ----- ///
//Bloqueando o usuário caso não esteja logado

Separo a data de expiração e a chave gerada pelo md5, em outro arquivo

Dentro de auth.js crio uma condição para ver se o usuário está autenticado
Separo o Bearer do token

Crio um try catch, se tudo der certo ele retorna o id do usuário


/// ----- PARTE 13 ----- ///
//Edição dos dados do usuário
Crio verificações a respeito de email e password
Se o usuário informar a oldPassword, ele quer atualizar a senha



/// ---- PARTE 14 ---- ///
Validação de dados, se o usuário preencheu corretamente
Biblioteca yup -> schema validation
>>> yarn add yup

import * as 'Yup' from 'yup'

no userController
Foram criadas validações do yup

confirmPassword: Yup.string().when('password', (password, field) =>
        password ? field.required().oneOf([Yup.ref('password')]) : field
//dessa maneira, passo como referência o valor da password

no sessionControler foi criada uma validação para a autenticação também


{{{{{{{{{{{{{{{{{{{{{{{

Para funcionar:
>>> yarn dev
>>> sudo docker start datase

}}}}}}}}}}}}}}}}}}}}}}}


----- ATÉ AQUI MÓDULO 2 TÁ LINDO E MARAVILHOSO FUNCIONANDO ------

/// PARTE 14
//Configurando Multer
Upload de arquivo
Precisa de uma biblioteca que leia um corpo diferente (Multipart/form-Data)
>>> yarn add multer
Criar uma pasta na raiz do projeto (temp/uploads)
Dentro da CONFIG -> multer.js (vai ficar toda nossa configuração da parte de arquivo)
Em routes é importado o multer e configMulter
No Insomnia -> Foi criada uma pasta Files - POST - Multipart Form
     file (nome escolhido la nas rotas)
     setinha para baixo -> seleciona o file
         choose file
  Ctrl+E (Manager enviroment) -> adiciono o token
  Bearer Auth -> substituir o token pela variável token, como se fosse o base_url
  Depois dar o send
O arquivo será importado em temp/uploads

/// PARTE 15
// Salvando as informações do arquivo na base de dados
Toda vez q multer age sob uma rota, é gerada uma variável dentro de req == req.file
Criado um FileSession, importar nas rotas
Gerar uma migrate create-files

>>> yarn sequelize migration:create --name=create-files
Configuro a migration, mudo o nome de users para files

>>> yarn sequelize db:migrate

Criar um model de Files
Para fazer a conexão com o banco de dados, é importado o model de files no index.js

Ao rodar no Insomnia irá armazenar as info no banco de dados
Porém a tabela files não tem um relacionamento com a tabela users

//Sincando a files com a users
Se adicionar um campo novo na tabela de usuários(migration users), a tabela não vai conseguir referenciar, já que
a migration files é criada Depois

Migrations funcionam como uma linha do tempo da database

Criar uma nova migration para adicionar o campo de avatar na tabela de usuários
>>> yarn sequelize migration:create --name=add-avatar
-> ESSA MIGRATION É DIFERENTE DAS TABELAS CRIADAS ATÉ AGORA
configuro como columns
>>> yarn sequelize db:migrate

Atualizo o postbird, a última informação da coluna da tabela users, deverá ser avatar_id

No Insomnia -> crio o o avatar_id, no update
  Porém o model do user não tem o avatar_id

Criar o método associate em model User.js

Verificar se o ID está pegando um valor único para cada user

///PARTE 16
//Listagem de prestadores de serviço

Cria uma rota de Listagem
Cria um novo controller (ProviderController) -> Como é uma nova entidade, querendo listar apenas os prestadores
  Crio uma class que busque todos os providers true.
  Talvez nenhum provider esteja true, basta ir no postbird e trocar o provider de false para true
Após importar os atributos no Provider, para nomear de 'File' para 'avatar', devemos ir no User.js e passar um as:'avatar'

Como não tem nenhuma informação passando a url da imagem, não é possível passar para o front-end
Gerando a URL do arquivo:
  Em file.js, é criado um campo virtual
  Incluído aos atributos 'url' (ProviderController)
  Recurso do express para servir arquivos estáticos, imagens. css, html, que podem ser acessados diretamente pelo navegador

///PARTE 17
//Criando agendamento
Gerar uma nova migration -> create-appointments
  trocar users por appointments,
  referenciar o usuario e provider à tabela appointments
Gerar um db:migrate

Criando o model appointment.js


///PARTE 18
//Agendando o serviço com algum prestador
Começa criando o controller
(AppointmentController.js)
Importa nas rotas tmb
No Insomnia é preciso se assegurar que o token não seja de um provider
Crio as validações
retorno as informações do agendamento


///PARTE 19
//Validação da data de agendamento
-> Apenas em datas futuras, e um agendamento por hora
Biblioteca para trabalhar com datas no node
>>> yarn add date-fns@next
No AppointmentController
  import {startOfHour, parseIso } from 'date-fns'
Faço duas verificações, sendo uma para validar se a data é futura, não tem como fazer um agendamento no passado
A outra é para ver se o prestador já tem horário marcado. A disponibilidade do pestador é a cada 1h, e sempre pegando a hora, sem os minutos

**Logar com o usuário normal, marcar o agendamento passando o id do provider


///PARTE 20
//Listar os agendamentos do usuario
Criado um método index no AppointmentController
  criado atributos de exibição
Nas rotas foi criado um método get

///PARTE 21
//Paginação
No Insomnia -> Query, parâmetro que é anexado na URL
    Dentro de appointments, get -> query -- page -- 1
dentro do index
  foi criada uma variável com valor padrão = 1
  e foram aplicados duas funcionalidades ao appointments, limit e offset

///PARTE 22
//Listagem para o provider
Criado um ScheduleController -> Agenda
Gerado um método index, o qual é passado para as rotas
No Insomnia, vale lembrar que o provider deve estar autenticado


///PARTE 23
//Conectando com um banco não relacional MONGODB
- Dados não estruturados, não relacional e performáticos
Rodando no docker
docker run --name mongobarber -p 27017:27017 -d -t mongo
porta padrão do mongo = 27017

localhost:27017 //testa o mongo, tem que exibir uma mensagem

Conectando com o banco de dados
>>> yarn add mongoose
No index.js da database, foi criada uma class mongo

///PARTE 24
//Enviando notificação para o prestador de serviço toda vez q tiver um agendamento
Schemas (mongo) = models
Foi criada uma pasta schemas dentro de app
Notification.js
que funciona basicamente como uma migration, configurando o tipo dos dados
Carregado no AppointmentController
Criado um texto com o nome e a data
Formatação da data com o date-fns, inclusive com o idioma português para o mês

Interface gráfica - mongoDb compass comunity
Com o mongobarber, database e dev rodando
faço a conexão no mongodb - localhost:27017
O banco SQL -> Dados estruturados com relacionamento
Banco NoSQL -> Dados não estruturados, sem relacionamento, com performace

///PARTE 25
//Listagem de notificações do usuário
Criada uma rota e um controller de notification
Foi feita uma validação para ver se o user é um provider
O return tem q devolver as notificações em pilha, da notificação mais recente até a mais antiga

///PARTE 26
//Marcando a notificação como lida
Criado um método update no NotificationController e uma rota
O update busca a propriedade read, converte de false pra true e retorna o valor atualizado

///PARTE 27
//Cancelando um agendamento
Esse cancelamento só será permitido com uma distância de horário de 2h
Criado um novo método dentro de AppointmentController


///PARTE 28
//Configurando envios de email
Como o cancelamento é importante para o prestador de serviço, será enviado um email toda vez
q um agendamento for cancelado

>>> yarn add nodemailer
Dentro de config, é criado um arquivo mail, onde terá as configurações de envio de email
As credenciais foram obtidas através do mailtrap.io, se atentar ao dados passados aqui

Criada uma pasta lib dentro de src -> Configurações adicionais, configurações de serviço
Arquivo Mail.js

///PARTE 29
//template de email
Utilizando handlebars
>>> yarn add express-handlebars nodemailer-express-handlebars

Dentro de app foi criada uma pasta views
dentro de views uma pasta emails
dentro de emails, layouts e partials
layouts
  default.hbs // configurado o css da mensagem
partials
  footer.hbs  // Mensagem da equipe
dentro da pasta emails, foi criado o texto de cancelamento (cancellation.hbs)

partials: arquivos que pode ser importado dentro de alguns emails
  mensagem que será repetida em vários emails

em Mail.js, criada uma class com as configurações de acesso aos arquivos do template

em AppointmentController, as configurações para o envio do email

///PARTE 30
//Configurando filas com Redis
Para demorar menos na hora de cancelar um agendamento,
no AppointmentController, no sendMail, remover o await
PORÉM, ao fazer isso, se der algum erro, não será retornado, não da pra saber se deu falha
Filas: trabalhos em background/segundo plano
Banco Chave Valor : redis -> Banco não relacional, não tem schemas
  Mais performáticos
  Armazena apenas Key and Value

>>> sudo docker run --name redisbarber -p 6379:6379 -d -t redis:alpine
instalar o bee queue // Ferramenta de fila dentro do node, em background
>>> yarn add bee-queue

Começo criando um arquivo dentro de lib, Queue.js
instancio uma classe
cada tipo de background job, ele terá sua própria fila
todos os trabalhos que ficam dentro das filas são chamados de jobs
Dentro da pasta app, cria uma pasta jobs, com o CancellationMail.js
Nesse arquivo foi passado o template do email, anteriormente estava em AppointmentController

Em lib foi criado um arquivo Queue.js
Pra cada um dos jobs cria uma fila e dentro da fila
armazena o bee(instância que conecta com o redis, que
consegue armazenar e recuperar os valores do banco de dados),
e o handle, processa as filas, recebe as variáveis do contexto,
do email, appointment e passa por dentro do job e armazena o job
dentro da fila.
E o processQueue, pega os jobs e processa em tempo real

em AppointmentController, é deletado o import do Mail, e passa a ser o import do Queue
 await Queue.add(CancellationMail.key, {
      appointment, /*Posso passar outros valores aqui*/
      teste:'teste', // Outro valor para exemplificar, e no CancellationMail, deve-se passar um teste tmb
    });
Na SRC -> queue.js // Separando a fila do servidor

no package.json -> scripts, "queue":"nodemon src/queue.js"
>>> yarn queue

createJob -> propriedade de Bee

para testar, no CancellationMail, console.log("A fila executou")

///PARTE 31
//lidando com falhas na fila
-> o bee tem tipos de eventos
bee.on('failed')

///PARTE 32
//Listando horários disponíveis do provider

 Como vai enviar uma data, no query params, do insomnia, date e timestamps(esse é o formato da data)
 Para pegar a data nesse formato, abrir o chrome, inspecionar, no console, digitar new Date().getTime()
 O valor retornado é a data atual

///PARTE 33
//Campos virtuais no agendamento
Dentro de models/appointment são criados campos para avaliação de agendamento passado
e se é cancelável, o agendamento só pode ser cancelado com 2h de antecedência

///PARTE 34
//Tratamento de exceções -> erros da aplicação quando estão na produção

Ferramentas de monitoramento de erros
  sentry -> Utilizando esse
  bugsnag

sentry.io
  projects, create projects, express, renomeio ele, mudo o time e dou um create

criado uma config do sentry, que contém a URL dns
  esse arquivo é importado em app.js

dentro de app são adicionadas 2 propriedades sendo uma para executar antes de tudo,
está embutida nos middlewares e a outra, para execução depois de tudo, que está em rotas

Quando é feito no async, o express não consegue captar os erros
para solucionar isso:
>>> yarn add express-async-errors
importar no app.js

quando for gerado um erro, basta ir ao sentry, em issues

criando um middleware para tratamento de erros
// quando um middleware possui 4 parâmetros, ele é um middleware de tratamento de exceções

>>> yarn add youch // Faz uma tratativa de mensagens de erro, para melhorar a visualização do erro para o desenvolvedor

youch é importado dentro do app.js
Agora quando tiver um erro, será exibido no Insomnia
